name: PR title and commit message lint

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]

permissions:
  contents: read
  pull-requests: read

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Validate PR title and commit messages
        uses: actions/github-script@v7
        with:
          script: |
            // Globals: core, github, context
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;
            const prNumber = pr.number;
            const title = pr.title || '';

            const MAX_LINE = 90;
            const errors = [];

            // Allowed tags and aliases
            const allowed = new Set([
              'da-vinci','dvc',
              'server','controller','router','samza','vpj',
              'fast-client','fc','thin-client','tc',
              'changelog','cc',
              'pulsar-sink','producer','admin-tool',
              'test','build','doc','script','compat','protocol'
            ]);

            // Verify title format: [tag][tag] Message
            const titleMatch = title.match(/^((\[[^\]]+\])+)\s+(.*)$/);
            if (!titleMatch) {
              errors.push(
                "Title must start with one or more [tag] blocks, then a space, then a message. " +
                "Example: [server][da-vinci] Use dedicated thread to persist data to storage engine"
              );
            } else {
              const tagBlock = titleMatch[1];
              const message = titleMatch[3].trim();
              if (!message) {
                errors.push("Title must include a concise message after the tags.");
              }
              const tagRegex = /\[([^\]]+)\]/g;
              let m;
              const badTags = [];
              while ((m = tagRegex.exec(tagBlock)) !== null) {
                const tag = m[1].trim().toLowerCase();
                if (!allowed.has(tag)) badTags.push(m[1]);
              }
              if (badTags.length > 0) {
                errors.push(
                  "Invalid tag(s) in title: " + badTags.map(t => `[${t}]`).join(' ') +
                  ". Valid tags are: " +
                  [
                    "[da-vinci] or [dvc]",
                    "[server]", "[controller]", "[router]", "[samza]", "[vpj]",
                    "[fast-client] or [fc]", "[thin-client] or [tc]",
                    "[changelog] or [cc]",
                    "[pulsar-sink]", "[producer]", "[admin-tool]",
                    "[test]", "[build]", "[doc]", "[script]", "[compat]", "[protocol]"
                  ].join(", ")
                );
              }
            }

            // Fetch commits for this PR
            const commits = await github.paginate(
              github.rest.pulls.listCommits,
              { owner, repo, pull_number: prNumber, per_page: 100 }
            );

            // Helper to pretty print an overlong line with a caret marker
            function formatOverflow(line) {
              const head = line.slice(0, MAX_LINE);
              const tail = line.slice(MAX_LINE);
              // Marker under the first overflow character, account for "> " prefix
              const marker = ' '.repeat(2 + MAX_LINE) + '^ overflow here';
              return `> ${head}${tail}\n${marker}`;
            }

            // Check commit messages
            for (const c of commits) {
              const sha = c.sha.substring(0, 12);
              const msg = c.commit?.message || '';
              const subject = msg.split('\n')[0];
              // Skip merges
              if (/^Merge\b/.test(subject)) continue;

              const lines = msg.split('\n');
              lines.forEach((line, idx) => {
                if (line.length === 0) return;
                if (line.length > MAX_LINE) {
                  errors.push(
                    `Commit ${sha} line ${idx + 1} exceeds ${MAX_LINE} chars (${line.length}).\n` +
                    formatOverflow(line)
                  );
                }
              });
            }

            if (errors.length) {
              core.summary
                .addHeading('PR lint failed')
                .addList(errors)
                .addSeparator()
                .addRaw('Title must follow: `[component1]...[componentN] Concise commit message`')
                .write();
              core.setFailed(errors.join('\n\n'));
            } else {
              core.summary.addHeading('PR lint passed').write();
            }

      # Optional: preserve first commit message formatting in the PR body if empty
      # Uncomment to enable
      # - name: Preserve first commit message in PR body (optional)
      #   if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const pr = context.payload.pull_request;
      #       if ((pr.body || '').trim().length > 0) return;
      #       const { owner, repo } = context.repo;
      #       const number = pr.number;
      #       const commits = await github.rest.pulls.listCommits({ owner, repo, pull_number: number, per_page: 1 });
      #       const msg = commits.data[0]?.commit?.message ?? '';
      #       const body = `<pre>\n${msg.replace(/</g,'&lt;')}\n</pre>`;
      #       await github.rest.pulls.update({ owner, repo, pull_number: number, body });