# GitHub Actions workflow for running static analysis and unit tests
name: AnalyseStatiqueEtTestsUnitaires

on: [push, pull_request, workflow_dispatch]

jobs:
  ValidateGradleWrapper:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

  StaticAnalysis:
    strategy:
      fail-fast: false
      matrix:
        jdk: [17]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
          cache: 'gradle'
      - shell: bash
        run: |
          git remote set-head origin --auto
          git remote add upstream https://github.com/linkedin/venice
          git fetch upstream
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: "--continue --no-daemon clean check --parallel -Pspotallbugs -x test -x integrationTest -x jacocoTestCoverageVerification"
      - name: Package Build Artifacts
        if: success() || failure()
        shell: bash
        run: |
          mkdir ${{ github.job }}-artifacts
          find . -path "**/build/reports/*" -or -path "**/build/test-results/*" > artifacts.list
          rsync -R --files-from=artifacts.list . ${{ github.job }}-artifacts
          tar -zcvf ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz ${{ github.job }}-artifacts
      - name: Upload Build Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}
          path: ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz
          retention-days: 30

  UnitTestsAndCodeCoverage:
    strategy:
      fail-fast: false
      matrix:
        jdk: [8, 11, 17]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.jdk }}
          distribution: 'temurin'
          cache: 'gradle'
      - shell: bash
        run: |
          git remote set-head origin --auto
          git remote add upstream https://github.com/linkedin/venice
          git fetch upstream
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: "-x :internal:venice-avro-compatibility-test:test jacocoTestCoverageVerification diffCoverage --continue"
      - name: Package Build Artifacts
        if: success() || failure()
        shell: bash
        run: |
          mkdir ${{ github.job }}-artifacts
          find . -path "**/build/reports/*" -or -path "**/build/test-results/*" > artifacts.list
          rsync -R --files-from=artifacts.list . ${{ github.job }}-artifacts
          tar -zcvf ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz ${{ github.job }}-artifacts
      - name: Upload Build Artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.job }}
          path: ${{ github.job }}-jdk${{ matrix.jdk }}-logs.tar.gz
          retention-days: 30
      - name: Search all test XML files
        id: process_test_xml
        run: |
          FILES=$(find . -name "TEST-*.xml" | tr '\n' ',' | sed 's/,$//')
          echo "files=$FILES" >> $GITHUB_OUTPUT
          for file in $(echo $FILES | tr ',' ' '); do
            # Process each file
            echo "Processing $file"
          done
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{secrets.CODECOV_TOKEN}}
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          files: ${{ steps.process_test_xml.outputs.files }}
          token: ${{ secrets.CODECOV_TOKEN }}

  StaticAnalysisAndUnitTestsCompletionCheck:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    needs: [ValidateGradleWrapper, StaticAnalysis, UnitTestsAndCodeCoverage]
    timeout-minutes: 120
    steps:
      - name: AllIsWell
        shell: bash
        run: |
          echo "LGTM!"



