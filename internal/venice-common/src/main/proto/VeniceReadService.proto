syntax = 'proto3';
package com.linkedin.venice.protocols;

option java_multiple_files = true;

service VeniceReadService {
  rpc get (VeniceClientRequest) returns (VeniceServerResponse) {
    option deprecated = true;
  }
  rpc batchGet(VeniceClientRequest) returns (VeniceServerResponse) {
    option deprecated = true;
  }

  rpc singleGet(SingleGetRequest) returns (SingleGetResponse) {}
  rpc multiGet(MultiGetRequest) returns (MultiGetResponse) {}
}

message SingleGetRequest {
  string resourceName = 1;
  uint32 partition = 2;
  string key = 3;
  bool isRetryRequest = 4;
}

message SingleGetResponse {
  int32 statusCode = 1;
  bytes value = 2;
  sint32 schemaId = 3;
  uint32 compressionStrategy = 4;
  uint32 rcu = 5;
  optional string errorMessage = 6;
  string contentType = 7;
  uint32 contentLength = 8;
}

message MultiGetRequest {
  string resourceName = 1;
  uint32 partition = 2;
  bytes  keyBytes = 3;            // used for batch get
  uint32 keyCount = 4;
  bool isRetryRequest = 5;
}

message MultiGetResponse {
  int32 statusCode = 1;
  bytes value = 2;
  sint32 schemaId = 3;
  uint32 compressionStrategy = 4;
  uint32 rcu = 5;
  optional string errorMessage = 6;
  string contentType = 7;
  uint32 contentLength = 8;
}

message VeniceClientRequest {
  uint32 partition = 1;
  string keyString = 2;           // used for single get
  bytes  keyBytes = 3;            // used for batch get
  string resourceName = 5;
  bool   isStreamingRequest = 7;
  bool   isRetryRequest = 8;
  bool   isBatchRequest = 9;

  string method = 10;
}

message VeniceServerResponse {
  sint32 schemaId = 1;
  bytes  data = 2;
  uint32 compressionStrategy = 3;
  uint32 responseRCU = 4;
  bool   isStreamingResponse = 5;

  uint32 errorCode = 6;
  string errorMessage = 7;
}